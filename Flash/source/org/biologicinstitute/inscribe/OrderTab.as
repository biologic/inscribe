/**----------------------------------------------------------------------------	Component: OrderTab 	Description: Class that implements the adjust strokes tab within Inscribe.		Stylus, Copyright 2006-2008 Biologic Institute	Licensed under the Apache License, Version 2.0 (the "License");	you may not use this file except in compliance with the License.	You may obtain a copy of the License at	    http://www.apache.org/licenses/LICENSE-2.0	Unless required by applicable law or agreed to in writing, software	distributed under the License is distributed on an "AS IS" BASIS,	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.	See the License for the specific language governing permissions and	limitations under the License.*/import mx.core.UIComponent;import mx.managers.DepthManager;import mx.utils.Delegate;import org.biologicinstitute.inscribe.Inscribe;import org.biologicinstitute.inscribe.Han;import org.biologicinstitute.inscribe.Tab;class org.biologicinstitute.inscribe.OrderTab  extends Tab{	static var symbolName:String = "OrderTab";	static var symbolOwner:Object = OrderTab;	var className:String = "OrderTab";	private static var MESSAGE_OFFSET:Number = Inscribe.MESSAGE_HEIGHT;	private static var MESSAGE_ORDER:String = "Click on stroke ";	private static var MESSAGE_DONE:String = "Done - click Reset to reorder";	private static var MESSAGE_EMPTY:String = "";	private var btnReset:Button;	private var txtMsg:TextField;		private var _iStroke:Number = 0;		function init()	{		super.init();	}		function createChildren()	{//		trace("Initializing Order tab");		btnReset.onRelease = Delegate.create(this, resetOrder);				_han.addEventListener('strokeHit', this);		_han.addEventListener('orderChanged', this);	}	function OrderTab ()	{		super();//		trace("Order Tab created");	}		function size()	{		super.size();	}		function activate(f:Boolean)	{		super.activate(f);		resetOrder();	}		function reset()	{		super.reset();				_iStroke = 0;		btnReset._visible = false;		setMessage(MESSAGE_EMPTY);	}		private function resetOrder()	{		if (_fIsActive && _han.strokeCount > 1)		{			_iStroke = 0;			_han.editMode = Han.EDIT_STROKEORDER;			updatePosition();		}		else		{			btnReset._visible = false;			setMessage(MESSAGE_EMPTY);		}	}		private function setMessage(str:String, fImportant:Boolean)	{		var txtFormat:TextFormat = txtMsg.getTextFormat();		txtFormat.color = (fImportant						   ? Inscribe.MESSAGE_IMPORTANT						   : Inscribe.MESSAGE_NORMAL);		txtMsg.text = str;		txtMsg.setTextFormat(txtFormat);	}		private function strokeHit(evt:Object)	{		if (_fIsActive)		{			_han.moveStrokeToPosition(evt.stroke, _iStroke);		}	}	private function orderChanged(evt:Object)	{		if (_fIsActive)		{			updatePosition();		}	}		private function updatePosition()	{		var nStrokes:Number = _han.strokeCount;				if (nStrokes > 1)		{			btnReset._visible = true;			_iStroke++;			setMessage(_iStroke <= nStrokes					   ? MESSAGE_ORDER + _iStroke					   : MESSAGE_DONE);		}	}}