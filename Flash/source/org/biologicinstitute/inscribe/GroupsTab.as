/**----------------------------------------------------------------------------	Component: GroupsTab	Description: Class that implements the groups tab within Inscribe.		Stylus, Copyright 2006-2008 Biologic Institute	Licensed under the Apache License, Version 2.0 (the "License");	you may not use this file except in compliance with the License.	You may obtain a copy of the License at	    http://www.apache.org/licenses/LICENSE-2.0	Unless required by applicable law or agreed to in writing, software	distributed under the License is distributed on an "AS IS" BASIS,	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.	See the License for the specific language governing permissions and	limitations under the License.*/import mx.core.UIComponent;import mx.managers.DepthManager;import org.biologicinstitute.inscribe.Inscribe;import org.biologicinstitute.inscribe.Han;import org.biologicinstitute.inscribe.Tab;class org.biologicinstitute.inscribe.GroupsTab extends Tab{	static var symbolName:String = "GroupsTab";	static var symbolOwner:Object = GroupsTab;	var className:String = "GroupsTab";		private static var GROUP_XOFFSET = 10;	private static var GROUP_YOFFSET = 160;	private static var GROUP_DYOFFSET = 26;	private var _mcGroupBorder:MovieClip = null;		private var _iGroup:Number = -1;	private var _fInEdit:Boolean = false;	private var _aryGroups:Array = new Array();		function init()	{		super.init();	}		function createChildren()	{//		trace("Initializing Groups tab");		_mcGroupBorder = createChildAtDepth("mcGroupBorder", DepthManager.kTop, { _visible: false });		_han.addEventListener('selectionChanged', this);	}	function GroupsTab()	{		super();//		trace("Groups Tab created");	}		function size()	{		super.size();	}		function activate(f:Boolean)	{		super.activate(f);				if (f)		{			_han.editMode = Han.EDIT_GROUPS;			if (!_fInEdit)			{				buildGroups();			}			else			{				for (var i=0; i < _aryGroups.length; i++)				{					Inscribe.enableButton(_aryGroups[i].ckClose, false, false);					Inscribe.enableButton(_aryGroups[i].ckDelete, true, true);				}								Inscribe.enableButton(_aryGroups[_iGroup].ckClose, true, true);				Inscribe.enableButton(_aryGroups[_iGroup].ckDelete, false, false);			}		}		else		{			for (var i=0; i < _aryGroups.length; i++)			{				Inscribe.enableButton(_aryGroups[i].ckClose, false, _aryGroups[i].ckClose._visible);				Inscribe.enableButton(_aryGroups[i].ckDelete, false, _aryGroups[i].ckDelete._visible);			}		}	}		function onKeyDown()	{		if (_fIsActive && _fInEdit && Key.getCode() == Key.ENTER)		{			closeGroup();		}	}		function reset()	{		super.reset();				for (var i=0; i < _aryGroups.length; i++)		{			_aryGroups[i].removeMovieClip();			delete _aryGroups[i];		}		_aryGroups.length = 0;				_iGroup = -1;		_fInEdit = false;	}		private function openGroup()	{		if (!_fInEdit)		{//			trace('Opening group ' + _aryGroups.length);			_iGroup = _aryGroups.length;			_fInEdit = true;						createNextGroup();				_mcGroupBorder._x = _aryGroups[_iGroup]._x;			_mcGroupBorder._y = _aryGroups[_iGroup]._y;			_mcGroupBorder.setDepthTo(DepthManager.kTop);			_mcGroupBorder._visible = true;		}	}		private function closeGroup()	{		if (_fInEdit)		{//			trace('Closing group ' + _iGroup + ' -- ' + _han.selection);				_aryGroups[_iGroup].txtStrokes.text = new String(_han.selection);			saveGroups();				Inscribe.enableButton(_aryGroups[_iGroup].ckClose, false, false);			Inscribe.enableButton(_aryGroups[_iGroup].ckDelete, true, true);						_iGroup = -1;			_fInEdit = false;			_mcGroupBorder._visible = false;						_han.clearSelection();				if (_han.ungroupedStrokes.length > 0)			{				openGroup();			}		}	}		private function deleteGroup(iGroup:Number)	{		if (iGroup >= 0 && iGroup < _aryGroups.length)		{			var i = iGroup;						_aryGroups[i].removeMovieClip();			delete _aryGroups[i];						for (; i < (_aryGroups.length-1); i++)			{				_aryGroups[i] = _aryGroups[i+1];				_aryGroups[i]._y -= GROUP_DYOFFSET;			}			_aryGroups.length--;						if (_fInEdit && _iGroup > iGroup)			{				_iGroup--;				_mcGroupBorder._x = _aryGroups[_iGroup]._x;				_mcGroupBorder._y = _aryGroups[_iGroup]._y;			}						saveGroups();			if (!_fInEdit)			{				openGroup();			}		}	}		private function createNextGroup()	{//		trace('Creating group ' + _aryGroups.length);		var mcGroup:MovieClip = createChildAtDepth("mcGroup", DepthManager.kTop);		mcGroup._x = GROUP_XOFFSET;		mcGroup._y = GROUP_YOFFSET + (GROUP_DYOFFSET * _aryGroups.length);					Inscribe.enableButton(mcGroup.ckClose, true, true);		Inscribe.enableButton(mcGroup.ckDelete, false, false);				var funcOnReleaseClose = function()		{			var me = arguments.callee;			var tab:Object = me._tab;			tab.closeGroup.apply(tab);		};		funcOnReleaseClose._tab = this;		mcGroup.ckClose.onRelease = funcOnReleaseClose;				var funcOnReleaseDelete = function()		{			var me = arguments.callee;			var tab:Object = me._tab;			var group:Object = me._group;			tab.deleteGroup.call(tab, tab.findGroup.call(tab, group));		};		funcOnReleaseDelete._group = mcGroup;		funcOnReleaseDelete._tab = this;		mcGroup.ckDelete.onRelease = funcOnReleaseDelete;		_aryGroups[_aryGroups.length] = mcGroup;	}		private function findGroup(g:Object):Number	{		var i;		for (i=0; i < _aryGroups.length; i++)		{			if (_aryGroups[i] == g)				break;		}		if (i >= _aryGroups.length)			i = -1;		return i;	}		private function buildGroups()	{		var aryGroups:Array = _han.groups;		var i;				for (i=0; i < aryGroups.length; i++)		{			if (i >= _aryGroups.length)			{				createNextGroup();			}						_aryGroups[i].txtStrokes.text = new String(aryGroups[i]);			Inscribe.enableButton(_aryGroups[i].ckClose, false, false);			Inscribe.enableButton(_aryGroups[i].ckDelete, true, true);		}				while (_aryGroups.length > aryGroups.length)		{			deleteGroup(aryGroups.length);		}				_aryGroups.length = aryGroups.length;				if (!_fInEdit && _han.ungroupedStrokes.length > 0)		{			openGroup();		}	}		private function saveGroups()	{		var aryGroups:Array = new Array();		//		trace('Saving: ' + _aryGroups.length + ' groups');		for (var i=0; i < _aryGroups.length; i++)		{			aryGroups[i] = new String(_aryGroups[i].txtStrokes.text);//			trace(_aryGroups[i].txtStrokes.text + ' -- ' + aryGroups[i]);		}				_han.groups = aryGroups;	}		private function selectionChanged(evt:Object)	{		if (_fIsActive && _fInEdit)		{//			trace('GroupsTab: selectionChanged ' + _han.selection);			_aryGroups[_iGroup].txtStrokes.text = new String(_han.selection);		}	}}