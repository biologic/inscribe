/**----------------------------------------------------------------------------	Component: OverlapsTab	Description: Class that implements the Overlaps tab within Inscribe.		Stylus, Copyright 2006-2008 Biologic Institute	Licensed under the Apache License, Version 2.0 (the "License");	you may not use this file except in compliance with the License.	You may obtain a copy of the License at	    http://www.apache.org/licenses/LICENSE-2.0	Unless required by applicable law or agreed to in writing, software	distributed under the License is distributed on an "AS IS" BASIS,	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.	See the License for the specific language governing permissions and	limitations under the License.*/import mx.core.UIComponent;import mx.managers.DepthManager;import org.biologicinstitute.inscribe.Inscribe;import org.biologicinstitute.inscribe.Han;import org.biologicinstitute.inscribe.Tab;class org.biologicinstitute.inscribe.OverlapsTab extends Tab{	static var symbolName:String = "OverlapsTab";	static var symbolOwner:Object = OverlapsTab;	var className:String = "OverlapsTab";		private static var OVERLAP_XOFFSET = 10;	private static var OVERLAP_YOFFSET = 135;	private static var OVERLAP_DXOFFSET = 105;	private static var OVERLAP_DYOFFSET = 26;	private static var OVERLAP_MAXPERCOLUMN = 12;	private static var OVERLAP_BORDEROFFSET = 1;		private var mcOptional:MovieClip;	private var mcRequired:MovieClip;		private var _mcOverlapBorder:MovieClip = null;		private var _iOverlap:Number = -1;	private var _fInEdit:Boolean = false;	private var _aryOverlaps:Array = null;	private var _idInterval:Number;		private var _fRequired:Boolean = false;	function set required(f:Boolean)	{		_fRequired = f;	}	function get required():Boolean	{		return _fRequired;	}		function init()	{		super.init();	}		function createChildren()	{//		trace("Initializing Overlaps tab");		_mcOverlapBorder = createChildAtDepth("mcOverlapBorder", DepthManager.kTop, { _visible: false });		_aryOverlaps = new Array();		_han.addEventListener('selectionChanged', this);	}	function OverlapsTab()	{		super();//		trace("Overlaps Tab created");	}		function size()	{		super.size();	}		function activate(f:Boolean)	{		super.activate(f);				if (f)		{			mcOptional._visible = (_fRequired ? false : true);			mcRequired._visible = (_fRequired ? true : false);			_han.editMode = Han.EDIT_OVERLAPS;			if (!_fInEdit)			{				buildOverlaps();			}			else if (_aryOverlaps.length)			{				for (var i=0; i < _aryOverlaps.length; i++)				{					Inscribe.enableButton(_aryOverlaps[i].ckDelete, true, true);				}								Inscribe.enableButton(_aryOverlaps[_iOverlap].ckDelete, false, true);			}		}		else		{			for (var i=0; i < _aryOverlaps.length; i++)			{				Inscribe.enableButton(_aryOverlaps[i].ckDelete, false, true);			}		}	}		function reset()	{		super.reset();				for (var i=0; i < _aryOverlaps.length; i++)		{			_aryOverlaps[i].removeMovieClip();			delete _aryOverlaps[i];		}		_aryOverlaps.length = 0;				_iOverlap = -1;		_fInEdit = false;	}		private function ensureLayout()	{		var xOffset:Number = OVERLAP_XOFFSET;		var yOffset:Number = OVERLAP_YOFFSET;		for (var i=0; i < _aryOverlaps.length; i++)		{			var mcOverlap = _aryOverlaps[i];			mcOverlap._x = xOffset;			mcOverlap._y = yOffset;			mcOverlap._visible = true;						if (i == (OVERLAP_MAXPERCOLUMN-1))			{				xOffset += OVERLAP_DXOFFSET;				yOffset = OVERLAP_YOFFSET;			}			else			{				yOffset += OVERLAP_DYOFFSET;			}		}		if (_fInEdit)		{			_mcOverlapBorder._x = _aryOverlaps[_iOverlap]._x;			_mcOverlapBorder._y = _aryOverlaps[_iOverlap]._y + OVERLAP_BORDEROFFSET;			_mcOverlapBorder.setDepthTo(DepthManager.kTop);			_mcOverlapBorder._visible = true;		}		else		{			_mcOverlapBorder._visible = false;		}	}		private function openOverlap()	{//		trace('Opening overlap ' + _aryOverlaps.length);		_iOverlap = _aryOverlaps.length;		_fInEdit = true;		createNextOverlap();				ensureLayout();	}		private function closeOverlap()	{//		trace('Closing group ' + _iOverlap + ' -- ' + _han.selection);				_aryOverlaps[_iOverlap].txtStrokes.text = new String(_han.selection);		saveOverlaps();		Inscribe.enableButton(_aryOverlaps[_iOverlap].ckDelete, true, true);		_iOverlap = -1;		_fInEdit = false;				_idInterval = setInterval(this, 'clearAndOpenOverlap', Inscribe.INTERVAL_HALF_SECOND);	}		private function clearAndOpenOverlap()	{		clearInterval(_idInterval);		_idInterval = null;			_han.clearSelection();		openOverlap();	}		private function deleteOverlap(iOverlap:Number)	{		if (iOverlap >= 0 && iOverlap < _aryOverlaps.length)		{			var i = iOverlap;						destroyOverlap(_aryOverlaps[i]);						for (; i < (_aryOverlaps.length-1); i++)			{				_aryOverlaps[i] = _aryOverlaps[i+1];			}			_aryOverlaps.length--;						if (_fInEdit)			{				if (_iOverlap > iOverlap)				{					_iOverlap--;				}			}						ensureLayout();			saveOverlaps();		}	}		private function destroyOverlap(o:Object)	{		o.removeMovieClip();		delete o;	}		private function createNextOverlap()	{//		trace('Creating overlap ' + _aryOverlaps.length);		var mcOverlap:MovieClip = createChildAtDepth("mcOverlap", DepthManager.kTop);		mcOverlap._visible = true;		Inscribe.enableButton(mcOverlap.ckDelete, false, true);				var funcOnReleaseDelete = function()		{			var me = arguments.callee;			var tab:Object = me._tab;			var overlap:Object = me._overlap;			tab.deleteOverlap.call(tab, tab.findOverlap.call(tab, overlap));		};		funcOnReleaseDelete._overlap = mcOverlap;		funcOnReleaseDelete._tab = this;		mcOverlap.ckDelete.onRelease = funcOnReleaseDelete;		_aryOverlaps[_aryOverlaps.length] = mcOverlap;	}		private function findOverlap(o:Object):Number	{		var i;		for (i=0; i < _aryOverlaps.length; i++)		{			if (_aryOverlaps[i] == o)				break;		}		if (i >= _aryOverlaps.length)			i = -1;		return i;	}		private function buildOverlaps()	{		var aryHanOverlaps:Array = _han.overlaps;		var nOverlaps:Number = 0;		//		trace('REQUIRED: ' + _fRequired);//		trace('HAN OVERLAPS: ' + aryHanOverlaps.length);		for (var i=0; i < aryHanOverlaps.length; i++)		{			var aryHanOverlap:Array = aryHanOverlaps[i].split(',',3);						if ((Number(aryHanOverlap[2]) != 0) == _fRequired)			{//				trace('MATCH: ' + aryHanOverlaps[i] + ' -- ' + aryHanOverlap.join(','));				if (nOverlaps >= _aryOverlaps.length)				{					createNextOverlap();				}							_aryOverlaps[nOverlaps].txtStrokes.text = new String(aryHanOverlap[0] + ',' + aryHanOverlap[1]);				Inscribe.enableButton(_aryOverlaps[nOverlaps].ckDelete, true, true);				nOverlaps++;			}		}				for (var i=nOverlaps; i < _aryOverlaps.length; i++)		{			destroyOverlap(_aryOverlaps[i]);		}		_aryOverlaps.length = nOverlaps;//		trace('OVERLAPS: ' + nOverlaps + ' -- ' + _aryOverlaps.length);				ensureLayout();				if (!_fInEdit && _han.strokeCount >= 2)		{			openOverlap();		}	}		private function saveOverlaps()	{		var aryHanOverlaps:Array = _han.overlaps;		var aryOverlaps:Array = new Array();				for (var i=0; i < aryHanOverlaps.length; i++)		{			var aryHanOverlap:Array = aryHanOverlaps[i].split(',',3);						if ((Number(aryHanOverlap[2]) != 0) != _fRequired)			{				aryOverlaps[aryOverlaps.length] = aryHanOverlaps[i];			}		}		//		trace('Saving: ' + _aryOverlaps.length + ' overlaps');		for (var i=0; i < _aryOverlaps.length; i++)		{			aryOverlaps[aryOverlaps.length] = _aryOverlaps[i].txtStrokes.text + ',' + (_fRequired ? '1' : '0');		}				_han.overlaps = aryOverlaps;	}		private function selectionChanged(evt:Object)	{		if (_fIsActive && _fInEdit)		{			var strSelection = _han.selection;						_aryOverlaps[_iOverlap].txtStrokes.text = new String(strSelection);						var arySelection = strSelection.split(',');			if (arySelection.length >= 2)			{				closeOverlap();			}		}	}}