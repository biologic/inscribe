/**----------------------------------------------------------------------------	Component: PositionTab	Description: Class that implements the positioning tab within Inscribe.		Stylus, Copyright 2006-2008 Biologic Institute	Licensed under the Apache License, Version 2.0 (the "License");	you may not use this file except in compliance with the License.	You may obtain a copy of the License at	    http://www.apache.org/licenses/LICENSE-2.0	Unless required by applicable law or agreed to in writing, software	distributed under the License is distributed on an "AS IS" BASIS,	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.	See the License for the specific language governing permissions and	limitations under the License.*/import flash.geom.Point;import mx.core.UIComponent;import mx.managers.DepthManager;import org.biologicinstitute.inscribe.Han;import org.biologicinstitute.inscribe.Inscribe;import org.biologicinstitute.inscribe.Tab;class org.biologicinstitute.inscribe.PositionTab extends Tab{	static var symbolName:String = "PositionTab";	static var symbolOwner:Object = PositionTab;	var className:String = "PositionTab";	private var btnUp:Button;	private var btnDown:Button;	private var btnLeft:Button;	private var btnRight:Button;	private var btnCenter:Button;	private var _idInterval:Number;		function init()	{		super.init();	}		function createChildren()	{		var funcOnPressMove = function()		{			var me = arguments.callee;			var tab:Object = me._tab;			var n:Number = (Key.isDown(Key.SHIFT)							? Inscribe.MOVE_LARGESTEP							: Inscribe.MOVE_SMALLSTEP);			var dx:Number = 0;			var dy:Number = 0;			switch (this)			{				case tab.btnUp   : dy = -n; break;				case tab.btnDown : dy = n; break;				case tab.btnLeft : dx = -n; break;				case tab.btnRight: dx = n; break;			}			tab.moveGlyph.apply(tab, [ dx, dy ]);			tab._idInterval = setInterval(tab, "moveGlyph", Inscribe.INTERVAL_8th_SECOND, dx, dy);		};		funcOnPressMove._tab = this;				var funcOnCenter = function()		{			var me = arguments.callee;			me._tab._han.glyphPosition = Han.POSITION_CENTER;		}		funcOnCenter._tab = this;				var funcOnRelease = function()		{			clearInterval(arguments.callee._tab._idInterval);			arguments.callee._tab._idInterval = null;		}		funcOnRelease._tab = this;				btnUp.onPress =		btnDown.onPress =		btnLeft.onPress =		btnRight.onPress = funcOnPressMove;				btnCenter.onPress = funcOnCenter;		btnUp.onRelease =		btnDown.onRelease =		btnLeft.onRelease =		btnRight.onRelease = funcOnRelease;		btnUp.onReleaseOutside =		btnDown.onReleaseOutside =		btnLeft.onReleaseOutside =		btnRight.onReleaseOutside = funcOnRelease;	}	function PositionTab()	{		super();//		trace("Position Tab created");	}		function size()	{		super.size();	}		function activate(f:Boolean)	{		super.activate(f);				btnUp.enabled = f;		btnDown.enabled = f;		btnLeft.enabled = f;		btnRight.enabled = f;		btnCenter.enabled = f;				if (f)		{			_han.editMode = Han.EDIT_OFF;		}	}	function onKeyDown()	{//		super.onKeyDown();		if (_fIsActive)		{			var fShifted:Boolean = Key.isDown(Key.SHIFT);			var nKey:Number = Key.getCode();			var nAscii:Number = Key.getAscii();			var dx:Number = 0;			var dy:Number = 0;			var d:Number = (fShifted										? Inscribe.MOVE_LARGESTEP										: Inscribe.MOVE_SMALLSTEP);						switch (nKey)			{			case Key.UP:				dy -= d;				break;							case Key.DOWN:				dy += d;				break;							case Key.RIGHT:				dx += d;				break;							case Key.LEFT:				dx -= d;				break;			}						moveGlyph(dx,dy);		}	}		function reset()	{		super.reset();	}		private function moveGlyph(dx:Number, dy:Number)	{		if (dx || dy)		{			var pt:Point = _han.glyphPosition;			pt.offset(dx,dy);//			trace("Moving by " + dx + "," + dy + ' to ' + pt.toString());			_han.glyphPosition = pt;		}	}}