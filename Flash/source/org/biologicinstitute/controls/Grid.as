/**----------------------------------------------------------------------------	Component: org.biologicinstitute.controls.Grid	Description: Renders a grid.		Stylus, Copyright 2006-2008 Biologic Institute	Licensed under the Apache License, Version 2.0 (the "License");	you may not use this file except in compliance with the License.	You may obtain a copy of the License at	    http://www.apache.org/licenses/LICENSE-2.0	Unless required by applicable law or agreed to in writing, software	distributed under the License is distributed on an "AS IS" BASIS,	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.	See the License for the specific language governing permissions and	limitations under the License.*/import flash.geom.Point;import flash.geom.Rectangle;import mx.core.UIComponent;class org.biologicinstitute.controls.Grid extends UIComponent{	static var symbolName:String = "Grid";		static var symbolOwner:Object = Grid;	var className:String = "Grid";	private var boundingBox_mc:MovieClip;	private var _fAlignToParent:Boolean = true;	[Inspectable(type=Boolean,defaultValue=true,name="Align to Parent")]	function set fAlignToParent(f:Boolean)	{		_fAlignToParent = f;		invalidate();	}	function get fAlignToParent():Boolean	{		return _fAlignToParent;	}		private var _nMinor:Number = 1;	[Inspectable(defaultValue=1, name="Minor Thickness")]	function set minorThickness(n:Number)	{		_nMinor = n;		invalidate();	}	function get minorThickness():Number	{		return _nMinor;	}		private var _nMajor:Number = 2;	[Inspectable(defaultValue=2, name="Major Thickness")]	function set majorThickness(n:Number)	{		_nMajor = n;		invalidate();	}	function get majorThickness():Number	{		return _nMajor;	}		private var _dMinor:Number = 10;	[Inspectable(defaultValue=10, name="Minor Step")]	function set minorStep(n:Number)	{		_dMinor = n;		invalidate();	}	function get minorStep():Number	{		return _dMinor;	}		private var _dMajor:Number = 100;	[Inspectable(defaultValue=100, name="Major Step")]	function set majorStep(n:Number)	{		_dMajor = n;		invalidate();	}	function get majorStep():Number	{		return _dMajor;	}		private var _nAlpha:Number = 100;	[Inspectable(type=Number, defaultValue=100, name="Transparency (alpha)")]	function set nAlpha(n:Number)	{		_nAlpha = n;		invalidate();	}	function get nAlpha():Number	{		return _nAlpha;	}		private var _rgbGrid:Number = 0xCCCCCC;	[Inspectable(type=Color, defaultValue="#CCCCCC", name="Grid Color")]	function set rgbGrid(rgb:Number)	{		_rgbGrid = rgb;		invalidate();	}	function get rgbGrid():Number	{		return _rgbGrid;	}		private var _nBorder:Number = 0;	[Inspectable(type=Number, defaultValue=0, name="Border Thickness")]	function set nBorder(n:Number)	{		_nBorder = n;		invalidate();	}	function get nBorder():Number	{		return _nBorder;	}		private var _rgbBorder = 0x78783C;	[Inspectable(type=Color, defaultValue="#78783C", name="Border Color")]	function set rgbBorder(rgb:Number)	{		_rgbBorder = rgb;		invalidate();	}	function get rgbBorder():Number	{		return _rgbBorder;	}		function init()	{		super.init();		useHandCursor = false;		boundingBox_mc._visible = false;		boundingBox_mc._width = 0;		boundingBox_mc._height = 0;	}		function createChildren()	{		super.createChildren();		size();	}		function Grid()	{	}		function size()	{		super.size();		invalidate();	}		function setSize(w:Number, h:Number, f:Boolean):Void	{		super.setSize(w, h, f);		_xscale = 100;		_yscale = 100;		invalidate();	}		function draw()	{		drawGrid();	}		function drawGrid()	{		var dxGrid:Number = width - 1;		var dyGrid:Number = height - 1;				var dxOffset:Number = 0;		var dyOffset:Number = 0;		if (_fAlignToParent)		{			dxOffset = x;			dyOffset = y;		}				clear();		if (_nMinor)		{			lineStyle(_nMinor, _rgbGrid, _nAlpha, false, "none", "none");			for (var xGrid=1; xGrid < dxGrid; xGrid++)			{				if (!((xGrid + dxOffset) % _dMinor))				{					moveTo(xGrid, 1);					lineTo(xGrid, dyGrid);				}			}			for (var yGrid=1; yGrid < dyGrid; yGrid++)			{				if (!((yGrid + dyOffset) % _dMinor))				{					moveTo(1, yGrid);					lineTo(dxGrid, yGrid);				}			}		}				if (_nMajor)		{			lineStyle(_nMajor, _rgbGrid, _nAlpha, false, "none", "none");			for (var xGrid=1; xGrid < dxGrid; xGrid++)			{				if (!((xGrid + dxOffset) % _dMajor))				{					moveTo(xGrid, 1);					lineTo(xGrid, dyGrid);				}			}			for (var yGrid=1; yGrid < dyGrid; yGrid++)			{				if (!((yGrid + dyOffset) % _dMajor))				{					moveTo(1, yGrid);					lineTo(dxGrid, yGrid);				}			}		}				if (_nBorder)		{			lineStyle(_nBorder, _rgbBorder, _nAlpha, false, "round", "round");			moveTo(0, 0);			lineTo(width-1, 0);			lineTo(width-1, height-1);			lineTo(0, height-1);			lineTo(0, 0);		}	}}