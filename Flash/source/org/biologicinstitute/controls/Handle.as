/**----------------------------------------------------------------------------	Component: org.biologicinstitute.controls.Handle	Description: Renders a drag-able handle.		Stylus, Copyright 2006-2008 Biologic Institute	Licensed under the Apache License, Version 2.0 (the "License");	you may not use this file except in compliance with the License.	You may obtain a copy of the License at	    http://www.apache.org/licenses/LICENSE-2.0	Unless required by applicable law or agreed to in writing, software	distributed under the License is distributed on an "AS IS" BASIS,	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.	See the License for the specific language governing permissions and	limitations under the License.*/import flash.filters.BevelFilter;import flash.geom.Point;import mx.core.UIComponent;import mx.managers.DepthManager;class org.biologicinstitute.controls.Handle extends UIComponent{	static var symbolName:String = "Handle";		static var symbolOwner:Object = Handle;	var className:String = "Handle";	private var boundingBox_mc:MovieClip;	private var _rgb:Number = 0xCCCCCC;	function set rgb(n:Number)	{		_rgb = n;		invalidate();	}	function get rgb():Number	{		return _rgb;	}		private var _nRadius:Number = 4;	function set nRadius(n:Number)	{		_nRadius = n;		invalidate();	}	function get nRadius():Number	{		return _nRadius;	}		function init()	{		super.init();		// useHandCursor = false;		boundingBox_mc._visible = false;		boundingBox_mc._width = 0;		boundingBox_mc._height = 0;	}		function createChildren():Void	{		super.createChildren();		size();	}		function Handle()	{	}		function size()	{		super.size();	}		function draw()	{		clear();		drawCircle(0, 0, _nRadius, _rgb);		filters = [ new BevelFilter(1, 45, 0xFFFFFF, 0.8, 0, 0.8, 5, 5, 3, 3, "inner", false) ];	}		private function drawCircle (cx:Number, cy:Number, r:Number, rgb:Number)	{		var c1=r*(Math.SQRT2-1);		var c2=r*Math.SQRT2/2;				beginFill(rgb);		moveTo(cx+r,cy);		curveTo(cx+r,cy+c1,cx+c2,cy+c2);		curveTo(cx+c1,cy+r,cx,cy+r);		curveTo(cx-c1,cy+r,cx-c2,cy+c2);		curveTo(cx-r,cy+c1,cx-r,cy);		curveTo(cx-r,cy-c1,cx-c2,cy-c2);		curveTo(cx-c1,cy-r,cx,cy-r);		curveTo(cx+c1,cy-r,cx+c2,cy-c2);		curveTo(cx+r,cy-c1,cx+r,cy);		endFill();	}		function bringForward()	{		MovieClip(this).setDepthTo(DepthManager.kTop);	}		function snapToPoint(pt:Object)	{		if (pt.x != x || pt.y != y)		{			move(pt.x, pt.y);		}	}		function destroy()	{		this.removeMovieClip();	}}