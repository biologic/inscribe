/**----------------------------------------------------------------------------	Component: org.biologicinstitute.controls.ControlPoint	Description: A control point used by Inscribe.	Stylus, Copyright 2006-2008 Biologic Institute	Licensed under the Apache License, Version 2.0 (the "License");	you may not use this file except in compliance with the License.	You may obtain a copy of the License at	    http://www.apache.org/licenses/LICENSE-2.0	Unless required by applicable law or agreed to in writing, software	distributed under the License is distributed on an "AS IS" BASIS,	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.	See the License for the specific language governing permissions and	limitations under the License.*/import flash.geom.Point;import flash.geom.Rectangle;import org.biologicinstitute.controls.Handleclass org.biologicinstitute.controls.ControlPoint{	static private var ptDefaultOffset:Point = new Point(0, 0);		private var _hHandle:Handle;		function ControlPoint(x:Number, y:Number, f:Boolean, h:Handle)	{		_x = x;		_y = y;		_fIsCurve = f;		_hHandle = h;		_hHandle.snapToPoint(this);				_fLockBounds = false;		_dxBound = 10;		_dyBound = 10;		_rBounds = undefined;	}		function destroy()	{		_hHandle.removeMovieClip();		delete _hHandle;	}		private var _fIsCurve:Boolean;	function set fIsCurve(f:Boolean)	{		_fIsCurve = f;	}	function get fIsCurve():Boolean	{		return _fIsCurve;	}		private var _fLockBounds:Boolean;	function set fLockBounds(f:Boolean)	{		if (f != _fLockBounds)		{			_fLockBounds = f;			ensureBounds();		}	}	function get fLockBounds():Boolean	{		return _fLockBounds;	}		private var _dxBound:Number;	function set dxBound(n:Number)	{		if (_dxBound != n)		{			_dxBound = n;			expandBounds();		}	}	function get dxBound():Number	{		return _dxBound;	}		private var _dyBound:Number;	function set dyBound(n:Number)	{		if (_dyBound != n)		{			_dyBound = n;			expandBounds();		}	}	function get dyBound():Number	{		return _dyBound;	}	private var _rBounds:Rectangle;	function get rBounds():Rectangle	{		return _rBounds;	}		function set rgb(n:Number)	{		_hHandle.rgb = n;	}	function get rgb():Number	{		return _hHandle.rgb;	}		function set nRadius(n:Number)	{		_hHandle.nRadius = n;	}	function get nRadius():Number	{		return _hHandle.nRadius;	}		private var _x:Number;	function set x(n:Number):Void	{		if (_fLockBounds)		{			if (n < _rBounds.left)				n = _rBounds.left;			else if (n > _rBounds.right)				n = _rBounds.right;		}		_x = n;		_hHandle.snapToPoint(this);	}	function get x():Number	{		return _x;	}		private var _y:Number;	function set y(n:Number):Void	{		if (_fLockBounds)		{			if (n < _rBounds.top)				n = _rBounds.top;			else if (n > _rBounds.bottom)				n = _rBounds.bottom;		}		_y = n;		_hHandle.snapToPoint(this);	}	function get y():Number	{		return _y;	}		function set visible(f:Boolean)	{		_hHandle.visible = f;	}	function get visible():Boolean	{		return _hHandle.visible;	}		function bringForward()	{		_hHandle.bringForward();	}		function move(nx:Number, ny:Number)	{		if (_fLockBounds)		{			if (nx < _rBounds.left)				nx = _rBounds.left;			else if (nx > _rBounds.right)				nx = _rBounds.right;			if (ny < _rBounds.top)				ny = _rBounds.top;			else if (ny > _rBounds.bottom)				ny = _rBounds.bottom;		}		_x = nx;		_y = ny;		_hHandle.snapToPoint(this);	}		function distanceTo(pt:Object)	{		var dx = x - pt.x;		var dy = y - pt.y;		return Math.sqrt((dx*dx)+(dy*dy));	}		function hitTest(x:Number, y:Number, f:Boolean)	{		return _hHandle.hitTest(x, y, f);	}		function slopeTo(pt:Object)	{		var dx = x - pt.x;		var dy = y - pt.y;				return (dy == 0				? Infinity				: dx / dy);	}		function startDrag(f:Boolean, xLeft:Number, yTop:Number, xRight:Number, yBottom:Number)	{		_hHandle.startDrag(f, xLeft, yTop, xRight, yBottom);	}		function stopDrag()	{		_hHandle.stopDrag();		_x = _hHandle.x;		_y = _hHandle.y;	}		function toPoint():Point	{		return new Point(_x, _y);	}		function toString(pt:Point):String	{		if (!pt)			pt = ptDefaultOffset;		return (_fIsCurve ? "c" : "") + (x+pt.x) + "," + (y+pt.y);	}		private function ensureBounds()	{		_rBounds = undefined;		if (_fLockBounds)		{			_rBounds = new Rectangle(_x-_dxBound, _y-_dyBound, (2 * _dxBound) + 1, (2 * _dyBound) + 1);		}	}		private function expandBounds()	{		if (_fLockBounds)		{			_rBounds = new Rectangle(((_rBounds.right - _rBounds.left) / 2) - _dxBound,									 ((_rBounds.bottom - _rBounds.top) / 2) - _dyBound,									 (2 * _dxBound) + 1,									 (2 * _dyBound) + 1);		}	}}